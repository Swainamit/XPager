
Zig_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00000d60  00000df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080011a  0080011a  00000eae  2**0
                  ALLOC
  3 .stab         00000bdc  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000213  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001103  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000335  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c0  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00003958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  00003b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2c  00000000  00000000  00003e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00004ab1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 31       	cpi	r26, 0x1A	; 26
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e1       	ldi	r26, 0x1A	; 26
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 34       	cpi	r26, 0x41	; 65
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <read_keypad>:

/*Function defination*/
unsigned char read_keypad(void)
{
	unsigned char keypad_input=0xff,keypad_output=0xff;
	KEYPAD_PORT=0xfe;
  92:	8e ef       	ldi	r24, 0xFE	; 254
  94:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <read_keypad+0x6>
  9c:	00 00       	nop
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
  9e:	86 b3       	in	r24, 0x16	; 22
  a0:	80 7f       	andi	r24, 0xF0	; 240

	if(keypad_input==0xe0)
  a2:	80 3e       	cpi	r24, 0xE0	; 224
  a4:	41 f0       	breq	.+16     	; 0xb6 <read_keypad+0x24>
		keypad_output=0x01;
	else if(keypad_input==0xd0)
  a6:	80 3d       	cpi	r24, 0xD0	; 208
  a8:	41 f0       	breq	.+16     	; 0xba <read_keypad+0x28>
		keypad_output=0x02;
	else if(keypad_input==0xb0)
  aa:	80 3b       	cpi	r24, 0xB0	; 176
  ac:	41 f0       	breq	.+16     	; 0xbe <read_keypad+0x2c>
		keypad_output=0x03;
	else if(keypad_input==0x70)
  ae:	80 37       	cpi	r24, 0x70	; 112
  b0:	41 f0       	breq	.+16     	; 0xc2 <read_keypad+0x30>


/*Function defination*/
unsigned char read_keypad(void)
{
	unsigned char keypad_input=0xff,keypad_output=0xff;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <read_keypad+0x32>
	KEYPAD_PORT=0xfe;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
		keypad_output=0x01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <read_keypad+0x32>
	else if(keypad_input==0xd0)
		keypad_output=0x02;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <read_keypad+0x32>
	else if(keypad_input==0xb0)
		keypad_output=0x03;
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <read_keypad+0x32>
	else if(keypad_input==0x70)
		keypad_output=0x0c;
  c2:	8c e0       	ldi	r24, 0x0C	; 12
	else 
		;

	KEYPAD_PORT=0xfd;
  c4:	9d ef       	ldi	r25, 0xFD	; 253
  c6:	98 bb       	out	0x18, r25	; 24
  c8:	95 e0       	ldi	r25, 0x05	; 5
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <read_keypad+0x38>
  ce:	00 00       	nop
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
  d0:	96 b3       	in	r25, 0x16	; 22
  d2:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
  d4:	90 3e       	cpi	r25, 0xE0	; 224
  d6:	39 f0       	breq	.+14     	; 0xe6 <read_keypad+0x54>
		keypad_output=0x04;
	else if(keypad_input==0xd0)
  d8:	90 3d       	cpi	r25, 0xD0	; 208
  da:	39 f0       	breq	.+14     	; 0xea <read_keypad+0x58>
		keypad_output=0x05;
	else if(keypad_input==0xb0)
  dc:	90 3b       	cpi	r25, 0xB0	; 176
  de:	39 f0       	breq	.+14     	; 0xee <read_keypad+0x5c>
		keypad_output=0x06;
	else if(keypad_input==0x70)
  e0:	90 37       	cpi	r25, 0x70	; 112
  e2:	41 f4       	brne	.+16     	; 0xf4 <read_keypad+0x62>
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <read_keypad+0x60>
	KEYPAD_PORT=0xfd;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
		keypad_output=0x04;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <read_keypad+0x62>
	else if(keypad_input==0xd0)
		keypad_output=0x05;
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <read_keypad+0x62>
	else if(keypad_input==0xb0)
		keypad_output=0x06;
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <read_keypad+0x62>
	else if(keypad_input==0x70)
		keypad_output=0x0d;
  f2:	8d e0       	ldi	r24, 0x0D	; 13
	else 
		;

	KEYPAD_PORT=0xfb;
  f4:	9b ef       	ldi	r25, 0xFB	; 251
  f6:	98 bb       	out	0x18, r25	; 24
  f8:	95 e0       	ldi	r25, 0x05	; 5
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <read_keypad+0x68>
  fe:	00 00       	nop
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
 100:	96 b3       	in	r25, 0x16	; 22
 102:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
 104:	90 3e       	cpi	r25, 0xE0	; 224
 106:	39 f0       	breq	.+14     	; 0x116 <read_keypad+0x84>
		keypad_output=0x07;
	else if(keypad_input==0xd0)
 108:	90 3d       	cpi	r25, 0xD0	; 208
 10a:	39 f0       	breq	.+14     	; 0x11a <read_keypad+0x88>
		keypad_output=0x08;
	else if(keypad_input==0xb0)
 10c:	90 3b       	cpi	r25, 0xB0	; 176
 10e:	39 f0       	breq	.+14     	; 0x11e <read_keypad+0x8c>
		keypad_output=0x09;
	else if(keypad_input==0x70)
 110:	90 37       	cpi	r25, 0x70	; 112
 112:	41 f4       	brne	.+16     	; 0x124 <read_keypad+0x92>
 114:	06 c0       	rjmp	.+12     	; 0x122 <read_keypad+0x90>
	KEYPAD_PORT=0xfb;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
		keypad_output=0x07;
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	05 c0       	rjmp	.+10     	; 0x124 <read_keypad+0x92>
	else if(keypad_input==0xd0)
		keypad_output=0x08;
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	03 c0       	rjmp	.+6      	; 0x124 <read_keypad+0x92>
	else if(keypad_input==0xb0)
		keypad_output=0x09;
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	01 c0       	rjmp	.+2      	; 0x124 <read_keypad+0x92>
	else if(keypad_input==0x70)
		keypad_output=0x0e; 
 122:	8e e0       	ldi	r24, 0x0E	; 14
	else 
		;		
		
	KEYPAD_PORT=0xf7;
 124:	97 ef       	ldi	r25, 0xF7	; 247
 126:	98 bb       	out	0x18, r25	; 24
 128:	95 e0       	ldi	r25, 0x05	; 5
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <read_keypad+0x98>
 12e:	00 00       	nop
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
 130:	96 b3       	in	r25, 0x16	; 22
 132:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
 134:	90 3e       	cpi	r25, 0xE0	; 224
 136:	39 f0       	breq	.+14     	; 0x146 <read_keypad+0xb4>
		keypad_output=0x0a; 
	else if(keypad_input==0xd0)
 138:	90 3d       	cpi	r25, 0xD0	; 208
 13a:	39 f0       	breq	.+14     	; 0x14a <read_keypad+0xb8>
		keypad_output=0x00;
	else if(keypad_input==0xb0)
 13c:	90 3b       	cpi	r25, 0xB0	; 176
 13e:	39 f0       	breq	.+14     	; 0x14e <read_keypad+0xbc>
		keypad_output=0x0b;
	else if(keypad_input==0x70)
 140:	90 37       	cpi	r25, 0x70	; 112
 142:	41 f4       	brne	.+16     	; 0x154 <read_keypad+0xc2>
 144:	06 c0       	rjmp	.+12     	; 0x152 <read_keypad+0xc0>
	KEYPAD_PORT=0xf7;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
		keypad_output=0x0a; 
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	08 95       	ret
	else if(keypad_input==0xd0)
		keypad_output=0x00;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
	else if(keypad_input==0xb0)
		keypad_output=0x0b;
 14e:	8b e0       	ldi	r24, 0x0B	; 11
 150:	08 95       	ret
	else if(keypad_input==0x70)
		keypad_output=0x0f;
 152:	8f e0       	ldi	r24, 0x0F	; 15
	else 
		;

	return keypad_output;
}
 154:	08 95       	ret

00000156 <usart_init>:

/*Function defination*/

void usart_init()
{
UBRRH = 0;
 156:	10 bc       	out	0x20, r1	; 32
UBRRL =51;
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	89 b9       	out	0x09, r24	; 9
UCSRB|= (1<<RXEN)|(1<<TXEN);
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	88 61       	ori	r24, 0x18	; 24
 160:	8a b9       	out	0x0a, r24	; 10
UCSRC |= (1 << URSEL)|(3<<UCSZ0);
 162:	80 b5       	in	r24, 0x20	; 32
 164:	86 68       	ori	r24, 0x86	; 134
 166:	80 bd       	out	0x20, r24	; 32
}
 168:	08 95       	ret

0000016a <usart_data_transmit>:


void usart_data_transmit(unsigned char data )
{
while ( !( UCSRA & (1<<UDRE)) )
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <usart_data_transmit>
;
UDR = data;
 16e:	8c b9       	out	0x0c, r24	; 12
}
 170:	08 95       	ret

00000172 <usart_data_receive>:

unsigned char usart_data_receive( void )
{
while ( !(UCSRA & (1<<RXC)) )
 172:	5f 9b       	sbis	0x0b, 7	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <usart_data_receive>
;
return UDR;
 176:	8c b1       	in	r24, 0x0c	; 12
}
 178:	08 95       	ret

0000017a <usart_string_transmit>:

void usart_string_transmit(char *string)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
while(*string)
 180:	88 81       	ld	r24, Y
 182:	88 23       	and	r24, r24
 184:	31 f0       	breq	.+12     	; 0x192 <usart_string_transmit+0x18>
while ( !(UCSRA & (1<<RXC)) )
;
return UDR;
}

void usart_string_transmit(char *string)
 186:	21 96       	adiw	r28, 0x01	; 1
{
while(*string)
{
usart_data_transmit(*string++);
 188:	0e 94 b5 00 	call	0x16a	; 0x16a <usart_data_transmit>
return UDR;
}

void usart_string_transmit(char *string)
{
while(*string)
 18c:	89 91       	ld	r24, Y+
 18e:	88 23       	and	r24, r24
 190:	d9 f7       	brne	.-10     	; 0x188 <usart_string_transmit+0xe>
{
usart_data_transmit(*string++);
}
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <usart_string_receive>:

char *usart_string_receive(char *receive_string,unsigned char terminating_character)
{
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	7c 01       	movw	r14, r24
 1a6:	d6 2f       	mov	r29, r22
	unsigned char temp=0x00;
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned char i=0;;i++)
	{
		*(receive_string+i)=usart_data_receive();
 1aa:	87 01       	movw	r16, r14
 1ac:	0c 0f       	add	r16, r28
 1ae:	11 1d       	adc	r17, r1
 1b0:	0e 94 b9 00 	call	0x172	; 0x172 <usart_data_receive>
 1b4:	f8 01       	movw	r30, r16
 1b6:	80 83       	st	Z, r24
		if(*(receive_string+i)==terminating_character)
 1b8:	8d 17       	cp	r24, r29
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <usart_string_receive+0x28>
			break;
		else
		temp++;
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
	}
 1be:	f5 cf       	rjmp	.-22     	; 0x1aa <usart_string_receive+0x12>
	*(receive_string+temp)='\0';
 1c0:	f7 01       	movw	r30, r14
 1c2:	ec 0f       	add	r30, r28
 1c4:	f1 1d       	adc	r31, r1
 1c6:	10 82       	st	Z, r1
	return receive_string;
}
 1c8:	8e 2d       	mov	r24, r14
 1ca:	9f 2d       	mov	r25, r15
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	08 95       	ret

000001da <lcd_data_write>:

/*Function defination.*/

void lcd_data_write(unsigned char data)
{
LCD_CONT_PORT=_BV(LCD_EN)|_BV(LCD_RS);
 1da:	90 ea       	ldi	r25, 0xA0	; 160
 1dc:	95 bb       	out	0x15, r25	; 21
LCD_DATA_PORT=data;
 1de:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f ec       	ldi	r24, 0xCF	; 207
 1e2:	97 e0       	ldi	r25, 0x07	; 7
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_data_write+0xa>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_data_write+0x10>
 1ea:	00 00       	nop
_delay_ms(1);
LCD_CONT_PORT=_BV(LCD_RS);
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	8f ec       	ldi	r24, 0xCF	; 207
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_data_write+0x1a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_data_write+0x20>
 1fa:	00 00       	nop
_delay_ms(1);
}
 1fc:	08 95       	ret

000001fe <lcd_command_write>:


void lcd_command_write(unsigned char command)
{
LCD_CONT_PORT=_BV(LCD_EN);
 1fe:	90 e8       	ldi	r25, 0x80	; 128
 200:	95 bb       	out	0x15, r25	; 21
LCD_DATA_PORT=command;
 202:	8b bb       	out	0x1b, r24	; 27
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_command_write+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_command_write+0x10>
 20e:	00 00       	nop
_delay_ms(1);
LCD_CONT_PORT=0x00;
 210:	15 ba       	out	0x15, r1	; 21
 212:	8f ec       	ldi	r24, 0xCF	; 207
 214:	97 e0       	ldi	r25, 0x07	; 7
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_command_write+0x18>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_command_write+0x1e>
 21c:	00 00       	nop
_delay_ms(1);
}
 21e:	08 95       	ret

00000220 <lcd_init>:

void lcd_init()
{
	lcd_command_write(0x38);
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	lcd_command_write(0x01);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	lcd_command_write(0x06);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	lcd_command_write(0x0e);
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	
}
 238:	08 95       	ret

0000023a <lcd_string_write>:

void lcd_string_write(char *string)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
while (*string)
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <lcd_string_write+0x18>
	lcd_command_write(0x06);
	lcd_command_write(0x0e);
	
}

void lcd_string_write(char *string)
 246:	21 96       	adiw	r28, 0x01	; 1
{
while (*string)
lcd_data_write(*string++);
 248:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
	
}

void lcd_string_write(char *string)
{
while (*string)
 24c:	89 91       	ld	r24, Y+
 24e:	88 23       	and	r24, r24
 250:	d9 f7       	brne	.-10     	; 0x248 <lcd_string_write+0xe>
lcd_data_write(*string++);
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <lcd_number_write>:

void lcd_number_write(int number,unsigned char radix)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	46 2f       	mov	r20, r22
char *number_string="00000";
itoa(number,number_string,radix);
 25e:	c0 e6       	ldi	r28, 0x60	; 96
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	be 01       	movw	r22, r28
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	0e 94 69 06 	call	0xcd2	; 0xcd2 <itoa>
 26a:	21 96       	adiw	r28, 0x01	; 1
while (*number_string)
 26c:	80 e3       	ldi	r24, 0x30	; 48
lcd_data_write(*number_string++);
 26e:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>

void lcd_number_write(int number,unsigned char radix)
{
char *number_string="00000";
itoa(number,number_string,radix);
while (*number_string)
 272:	89 91       	ld	r24, Y+
 274:	88 23       	and	r24, r24
 276:	d9 f7       	brne	.-10     	; 0x26e <lcd_number_write+0x16>
lcd_data_write(*number_string++);
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <__vector_11>:
	else
	count2++;        //otherwise increment counter
	
}*/
ISR(USART_RXC_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	usart_received_data[count2]=usart_data_receive();
 2a4:	c0 91 3f 01 	lds	r28, 0x013F
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	0e 94 b9 00 	call	0x172	; 0x172 <usart_data_receive>
 2ae:	2a e1       	ldi	r18, 0x1A	; 26
 2b0:	31 e0       	ldi	r19, 0x01	; 1
 2b2:	c2 0f       	add	r28, r18
 2b4:	d3 1f       	adc	r29, r19
 2b6:	88 83       	st	Y, r24
	//lcd_command_write(0x01);
	/*Clear screen*/
	//lcd_command_write(0x80);
	if(usart_received_data[count2]=='~')
 2b8:	80 91 3f 01 	lds	r24, 0x013F
 2bc:	28 0f       	add	r18, r24
 2be:	31 1d       	adc	r19, r1
 2c0:	f9 01       	movw	r30, r18
 2c2:	80 81       	ld	r24, Z
 2c4:	8e 37       	cpi	r24, 0x7E	; 126
 2c6:	19 f4       	brne	.+6      	; 0x2ce <__vector_11+0x50>
	{
		usart_receive_status=1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 40 01 	sts	0x0140, r24
	}
	count2++;
 2ce:	80 91 3f 01 	lds	r24, 0x013F
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 3f 01 	sts	0x013F, r24
	
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:

int main(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	c7 59       	subi	r28, 0x97	; 151
 308:	d0 40       	sbci	r29, 0x00	; 0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xff;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	8a bb       	out	0x1a, r24	; 26
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRC=0xff;
 318:	84 bb       	out	0x14, r24	; 20
	
	DDRD=0xf0;
 31a:	90 ef       	ldi	r25, 0xF0	; 240
 31c:	91 bb       	out	0x11, r25	; 17
	/*PC0, PC1 and PC2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRB=0x0f;
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	97 bb       	out	0x17, r25	; 23
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTB=0xff;
 322:	88 bb       	out	0x18, r24	; 24
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char count=0, cursor_count=0, password_status=0, keypad_value;
	count2=0;
 324:	10 92 3f 01 	sts	0x013F, r1

	char password_set[5]="1111", password_entered[5];
 328:	de 01       	movw	r26, r28
 32a:	11 96       	adiw	r26, 0x01	; 1
 32c:	ed ed       	ldi	r30, 0xDD	; 221
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	01 90       	ld	r0, Z+
 334:	0d 92       	st	X+, r0
 336:	81 50       	subi	r24, 0x01	; 1
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x34>
	char input_array[34]="";
 33a:	1b 86       	std	Y+11, r1	; 0x0b
 33c:	1c 86       	std	Y+12, r1	; 0x0c
 33e:	1d 86       	std	Y+13, r1	; 0x0d
 340:	1e 86       	std	Y+14, r1	; 0x0e
 342:	fe 01       	movw	r30, r28
 344:	3f 96       	adiw	r30, 0x0f	; 15
 346:	8e e1       	ldi	r24, 0x1E	; 30
 348:	df 01       	movw	r26, r30
 34a:	1d 92       	st	X+, r1
 34c:	8a 95       	dec	r24
 34e:	e9 f7       	brne	.-6      	; 0x34a <main+0x4c>
	char id_count[5]="";char CONT_ID[5] ="0001";
 350:	1d a6       	lds	r17, 0xbd
 352:	1e a6       	lds	r17, 0xbe
 354:	1f a6       	lds	r17, 0xbf
 356:	18 aa       	sts	0x98, r17
 358:	19 aa       	sts	0x99, r17
 35a:	de 01       	movw	r26, r28
 35c:	d2 96       	adiw	r26, 0x32	; 50
 35e:	e2 ee       	ldi	r30, 0xE2	; 226
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	85 e0       	ldi	r24, 0x05	; 5
 364:	01 90       	ld	r0, Z+
 366:	0d 92       	st	X+, r0
 368:	81 50       	subi	r24, 0x01	; 1
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x66>
	
	unsigned char string_index=0;   const char s[2] = ",";
 36c:	8c e2       	ldi	r24, 0x2C	; 44
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	98 af       	sts	0x78, r25
 372:	8f ab       	sts	0x5f, r24
	char *token;//string_index2,string_index3,string_index4,
	//string_index5,string_index6,string_index7,string_index8,string_index9=0;
	
	char String2[5]={'a','b','c','-','\0'},String3[5]={'d','e','f','&','\0'},String4[5]={'g','h','i','%','\0'},
 374:	de 01       	movw	r26, r28
 376:	d9 96       	adiw	r26, 0x39	; 57
 378:	e7 ee       	ldi	r30, 0xE7	; 231
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	81 50       	subi	r24, 0x01	; 1
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x80>
 386:	de 01       	movw	r26, r28
 388:	de 96       	adiw	r26, 0x3e	; 62
 38a:	ec ee       	ldi	r30, 0xEC	; 236
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	81 50       	subi	r24, 0x01	; 1
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x92>
 398:	de 01       	movw	r26, r28
 39a:	ad 5b       	subi	r26, 0xBD	; 189
 39c:	bf 4f       	sbci	r27, 0xFF	; 255
 39e:	e1 ef       	ldi	r30, 0xF1	; 241
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0xa6>
	String5[5]={'j','k','l','(','\0'},String6[5]={'m','n','o',')','\0'},String7[5]={'p','q','r','s','\0'},
 3ac:	de 01       	movw	r26, r28
 3ae:	a8 5b       	subi	r26, 0xB8	; 184
 3b0:	bf 4f       	sbci	r27, 0xFF	; 255
 3b2:	e6 ef       	ldi	r30, 0xF6	; 246
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0xba>
 3c0:	de 01       	movw	r26, r28
 3c2:	a3 5b       	subi	r26, 0xB3	; 179
 3c4:	bf 4f       	sbci	r27, 0xFF	; 255
 3c6:	eb ef       	ldi	r30, 0xFB	; 251
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	81 50       	subi	r24, 0x01	; 1
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0xce>
 3d4:	de 01       	movw	r26, r28
 3d6:	ae 5a       	subi	r26, 0xAE	; 174
 3d8:	bf 4f       	sbci	r27, 0xFF	; 255
 3da:	e0 e0       	ldi	r30, 0x00	; 0
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	01 90       	ld	r0, Z+
 3e2:	0d 92       	st	X+, r0
 3e4:	81 50       	subi	r24, 0x01	; 1
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0xe2>
	String8[5]={'t','u','v','?','\0'},String9[5]={'w','x','y','z','\0'},String1[5]={'.',',','!','_','\0'};
 3e8:	de 01       	movw	r26, r28
 3ea:	a9 5a       	subi	r26, 0xA9	; 169
 3ec:	bf 4f       	sbci	r27, 0xFF	; 255
 3ee:	e5 e0       	ldi	r30, 0x05	; 5
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	01 90       	ld	r0, Z+
 3f6:	0d 92       	st	X+, r0
 3f8:	81 50       	subi	r24, 0x01	; 1
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0xf6>
 3fc:	de 01       	movw	r26, r28
 3fe:	a4 5a       	subi	r26, 0xA4	; 164
 400:	bf 4f       	sbci	r27, 0xFF	; 255
 402:	ea e0       	ldi	r30, 0x0A	; 10
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	01 90       	ld	r0, Z+
 40a:	0d 92       	st	X+, r0
 40c:	81 50       	subi	r24, 0x01	; 1
 40e:	e1 f7       	brne	.-8      	; 0x408 <main+0x10a>
 410:	de 01       	movw	r26, r28
 412:	af 59       	subi	r26, 0x9F	; 159
 414:	bf 4f       	sbci	r27, 0xFF	; 255
 416:	ef e0       	ldi	r30, 0x0F	; 15
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	01 90       	ld	r0, Z+
 41e:	0d 92       	st	X+, r0
 420:	81 50       	subi	r24, 0x01	; 1
 422:	e1 f7       	brne	.-8      	; 0x41c <main+0x11e>
		
	char cString2[5]={97,98,99,45,'\0'},cString3[5]={100,101,102,38,'\0'},cString4[5]={103,104,105,37,'\0'},
 424:	de 01       	movw	r26, r28
 426:	aa 59       	subi	r26, 0x9A	; 154
 428:	bf 4f       	sbci	r27, 0xFF	; 255
 42a:	e7 ee       	ldi	r30, 0xE7	; 231
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	81 50       	subi	r24, 0x01	; 1
 436:	e1 f7       	brne	.-8      	; 0x430 <main+0x132>
 438:	de 01       	movw	r26, r28
 43a:	a5 59       	subi	r26, 0x95	; 149
 43c:	bf 4f       	sbci	r27, 0xFF	; 255
 43e:	ec ee       	ldi	r30, 0xEC	; 236
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x146>
 44c:	de 01       	movw	r26, r28
 44e:	a0 59       	subi	r26, 0x90	; 144
 450:	bf 4f       	sbci	r27, 0xFF	; 255
 452:	e1 ef       	ldi	r30, 0xF1	; 241
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	01 90       	ld	r0, Z+
 45a:	0d 92       	st	X+, r0
 45c:	81 50       	subi	r24, 0x01	; 1
 45e:	e1 f7       	brne	.-8      	; 0x458 <main+0x15a>
	cString5[5]={106,107,108,40,'\0'},cString6[5]={109,110,111,41,'\0'},cString7[5]={112,113,114,115,'\0'},
 460:	de 01       	movw	r26, r28
 462:	ab 58       	subi	r26, 0x8B	; 139
 464:	bf 4f       	sbci	r27, 0xFF	; 255
 466:	e6 ef       	ldi	r30, 0xF6	; 246
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	01 90       	ld	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	81 50       	subi	r24, 0x01	; 1
 472:	e1 f7       	brne	.-8      	; 0x46c <__stack+0xd>
 474:	de 01       	movw	r26, r28
 476:	a6 58       	subi	r26, 0x86	; 134
 478:	bf 4f       	sbci	r27, 0xFF	; 255
 47a:	eb ef       	ldi	r30, 0xFB	; 251
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	85 e0       	ldi	r24, 0x05	; 5
 480:	01 90       	ld	r0, Z+
 482:	0d 92       	st	X+, r0
 484:	81 50       	subi	r24, 0x01	; 1
 486:	e1 f7       	brne	.-8      	; 0x480 <__stack+0x21>
 488:	de 01       	movw	r26, r28
 48a:	a1 58       	subi	r26, 0x81	; 129
 48c:	bf 4f       	sbci	r27, 0xFF	; 255
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	01 90       	ld	r0, Z+
 496:	0d 92       	st	X+, r0
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	e1 f7       	brne	.-8      	; 0x494 <__stack+0x35>
	cString8[5]={116,117,118,63,'\0'},cString9[5]={119,120,121,122,'\0'},cString1[5]={46,44,33,95,'\0'},cString0[5]={32,32,32,32,'\0'};
 49c:	de 01       	movw	r26, r28
 49e:	ac 57       	subi	r26, 0x7C	; 124
 4a0:	bf 4f       	sbci	r27, 0xFF	; 255
 4a2:	e5 e0       	ldi	r30, 0x05	; 5
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	01 90       	ld	r0, Z+
 4aa:	0d 92       	st	X+, r0
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__stack+0x49>
 4b0:	de 01       	movw	r26, r28
 4b2:	a7 57       	subi	r26, 0x77	; 119
 4b4:	bf 4f       	sbci	r27, 0xFF	; 255
 4b6:	ea e0       	ldi	r30, 0x0A	; 10
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	85 e0       	ldi	r24, 0x05	; 5
 4bc:	01 90       	ld	r0, Z+
 4be:	0d 92       	st	X+, r0
 4c0:	81 50       	subi	r24, 0x01	; 1
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__stack+0x5d>
 4c4:	de 01       	movw	r26, r28
 4c6:	a2 57       	subi	r26, 0x72	; 114
 4c8:	bf 4f       	sbci	r27, 0xFF	; 255
 4ca:	ef e0       	ldi	r30, 0x0F	; 15
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	01 90       	ld	r0, Z+
 4d2:	0d 92       	st	X+, r0
 4d4:	81 50       	subi	r24, 0x01	; 1
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__stack+0x71>
 4d8:	de 01       	movw	r26, r28
 4da:	ad 56       	subi	r26, 0x6D	; 109
 4dc:	bf 4f       	sbci	r27, 0xFF	; 255
 4de:	e4 e1       	ldi	r30, 0x14	; 20
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	85 e0       	ldi	r24, 0x05	; 5
 4e4:	01 90       	ld	r0, Z+
 4e6:	0d 92       	st	X+, r0
 4e8:	81 50       	subi	r24, 0x01	; 1
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__stack+0x85>
		
	unsigned char input_status=0; // 0-numeric and 1-alphabet
	
	usart_init();
 4ec:	0e 94 ab 00 	call	0x156	; 0x156 <usart_init>
	lcd_init();
 4f0:	0e 94 10 01 	call	0x220	; 0x220 <lcd_init>
	
	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
 4f4:	57 9a       	sbi	0x0a, 7	; 10

	
	lcd_string_write("Wireless Pager");
 4f6:	86 e6       	ldi	r24, 0x66	; 102
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
	
	lcd_command_write(0xc0);
 4fe:	80 ec       	ldi	r24, 0xC0	; 192
 500:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	/*Cursor moves to 2nd row 1st column of LCD*/

	lcd_string_write("System Ready");
 504:	85 e7       	ldi	r24, 0x75	; 117
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
 50c:	4f ef       	ldi	r20, 0xFF	; 255
 50e:	54 e3       	ldi	r21, 0x34	; 52
 510:	6c e0       	ldi	r22, 0x0C	; 12
 512:	41 50       	subi	r20, 0x01	; 1
 514:	50 40       	sbci	r21, 0x00	; 0
 516:	60 40       	sbci	r22, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <__stack+0xb3>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__stack+0xbd>
 51c:	00 00       	nop
 51e:	6f ef       	ldi	r22, 0xFF	; 255
 520:	74 e3       	ldi	r23, 0x34	; 52
 522:	8c e0       	ldi	r24, 0x0C	; 12
 524:	61 50       	subi	r22, 0x01	; 1
 526:	70 40       	sbci	r23, 0x00	; 0
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <__stack+0xc5>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__stack+0xcf>
 52e:	00 00       	nop
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	94 e3       	ldi	r25, 0x34	; 52
 534:	ac e0       	ldi	r26, 0x0C	; 12
 536:	81 50       	subi	r24, 0x01	; 1
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	a0 40       	sbci	r26, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__stack+0xd7>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__stack+0xe1>
 540:	00 00       	nop
 542:	4f ef       	ldi	r20, 0xFF	; 255
 544:	54 e3       	ldi	r21, 0x34	; 52
 546:	6c e0       	ldi	r22, 0x0C	; 12
 548:	41 50       	subi	r20, 0x01	; 1
 54a:	50 40       	sbci	r21, 0x00	; 0
 54c:	60 40       	sbci	r22, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <__stack+0xe9>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__stack+0xf3>
 552:	00 00       	nop
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);

	lcd_command_write(0x01);
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	/*Clear screen*/

	lcd_string_write("Enter Password");
 55a:	82 e8       	ldi	r24, 0x82	; 130
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
	/*String display in 1st row of LCD*/

	/*While loop for password entry and checking*/
	while(password_status==0x00)
	{
		lcd_command_write(0xc0);
 562:	88 24       	eor	r8, r8
			/*Scans 4X4 keypad and returns pressed key value or default value*/

			/*Checking if any key is pressed or not*/
			if(keypad_value != 0xff)
			{
				password_entered[count]=keypad_value+48;
 564:	8e 01       	movw	r16, r28
 566:	0a 5f       	subi	r16, 0xFA	; 250
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	60 2e       	mov	r6, r16
 56c:	41 2e       	mov	r4, r17
			password_status=1;
			/*Changing the Password Status to Correct Password*/
		}
		else
		{
			lcd_string_write("Wrong Password");
 56e:	0f 2e       	mov	r0, r31
 570:	f2 ea       	ldi	r31, 0xA2	; 162
 572:	cf 2e       	mov	r12, r31
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	df 2e       	mov	r13, r31
 578:	f0 2d       	mov	r31, r0
			/*Display stays for 2 second*/

			lcd_command_write(0x01);
			/*Clear screen*/

			lcd_string_write("Reenter Password");
 57a:	0f 2e       	mov	r0, r31
 57c:	f1 eb       	ldi	r31, 0xB1	; 177
 57e:	af 2e       	mov	r10, r31
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	bf 2e       	mov	r11, r31
 584:	f0 2d       	mov	r31, r0
	/*String display in 1st row of LCD*/

	/*While loop for password entry and checking*/
	while(password_status==0x00)
	{
		lcd_command_write(0xc0);
 586:	80 ec       	ldi	r24, 0xC0	; 192
 588:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
 58c:	e8 2c       	mov	r14, r8
		/*Cursor moves to 2nd row 1st column of LCD*/

		/*While loop for 4 digit password entry*/
		while(count<4)
		{
			keypad_value=read_keypad();
 58e:	0e 94 49 00 	call	0x92	; 0x92 <read_keypad>
			/*Scans 4X4 keypad and returns pressed key value or default value*/

			/*Checking if any key is pressed or not*/
			if(keypad_value != 0xff)
 592:	8f 3f       	cpi	r24, 0xFF	; 255
 594:	49 f0       	breq	.+18     	; 0x5a8 <__stack+0x149>
			{
				password_entered[count]=keypad_value+48;
 596:	f8 01       	movw	r30, r16
 598:	ee 0d       	add	r30, r14
 59a:	f1 1d       	adc	r31, r1
 59c:	80 5d       	subi	r24, 0xD0	; 208
 59e:	80 83       	st	Z, r24
				/*Storing the pressed key value of 4X4 keypad in ASCII format*/

				count++;
 5a0:	e3 94       	inc	r14
				/*Counter increment*/

				lcd_data_write('*');
 5a2:	8a e2       	ldi	r24, 0x2A	; 42
 5a4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 5a8:	6f ef       	ldi	r22, 0xFF	; 255
 5aa:	72 e5       	ldi	r23, 0x52	; 82
 5ac:	87 e0       	ldi	r24, 0x07	; 7
 5ae:	61 50       	subi	r22, 0x01	; 1
 5b0:	70 40       	sbci	r23, 0x00	; 0
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <__stack+0x14f>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__stack+0x159>
 5b8:	00 00       	nop
	{
		lcd_command_write(0xc0);
		/*Cursor moves to 2nd row 1st column of LCD*/

		/*While loop for 4 digit password entry*/
		while(count<4)
 5ba:	73 e0       	ldi	r23, 0x03	; 3
 5bc:	7e 15       	cp	r23, r14
 5be:	38 f7       	brcc	.-50     	; 0x58e <__stack+0x12f>
			/*300ms delay as guard time between two consecutive pressing of key*/
		}
		count=0;
		/*Counter reset to 0*/

		password_entered[4]=0;
 5c0:	8a 86       	std	Y+10, r8	; 0x0a
		/*Null character at the last of array(password_entered) to convert it to a string*/

		lcd_command_write(0x01);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
		/*Clear screen*/

		/*Password Comparison*/
		if(!(strcmp(password_set,password_entered)))
 5c8:	ce 01       	movw	r24, r28
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	66 2d       	mov	r22, r6
 5ce:	74 2d       	mov	r23, r4
 5d0:	0e 94 39 06 	call	0xc72	; 0xc72 <strcmp>
 5d4:	28 2f       	mov	r18, r24
 5d6:	39 2f       	mov	r19, r25
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	e9 f5       	brne	.+122    	; 0x658 <__stack+0x1f9>
		{
			lcd_string_write("Correct Password");
 5de:	81 e9       	ldi	r24, 0x91	; 145
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	94 e3       	ldi	r25, 0x34	; 52
 5ea:	ac e0       	ldi	r26, 0x0C	; 12
 5ec:	81 50       	subi	r24, 0x01	; 1
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	a0 40       	sbci	r26, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__stack+0x18d>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__stack+0x197>
 5f6:	00 00       	nop
 5f8:	4f ef       	ldi	r20, 0xFF	; 255
 5fa:	54 e3       	ldi	r21, 0x34	; 52
 5fc:	6c e0       	ldi	r22, 0x0C	; 12
 5fe:	41 50       	subi	r20, 0x01	; 1
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	60 40       	sbci	r22, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <__stack+0x19f>
 606:	00 c0       	rjmp	.+0      	; 0x608 <__stack+0x1a9>
 608:	00 00       	nop
 60a:	6f ef       	ldi	r22, 0xFF	; 255
 60c:	74 e3       	ldi	r23, 0x34	; 52
 60e:	8c e0       	ldi	r24, 0x0C	; 12
 610:	61 50       	subi	r22, 0x01	; 1
 612:	70 40       	sbci	r23, 0x00	; 0
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <__stack+0x1b1>
 618:	00 c0       	rjmp	.+0      	; 0x61a <__stack+0x1bb>
 61a:	00 00       	nop
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	94 e3       	ldi	r25, 0x34	; 52
 620:	ac e0       	ldi	r26, 0x0C	; 12
 622:	81 50       	subi	r24, 0x01	; 1
 624:	90 40       	sbci	r25, 0x00	; 0
 626:	a0 40       	sbci	r26, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <__stack+0x1c3>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <__stack+0x1cd>
 62c:	00 00       	nop
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);
	/*Display stays for 2 second*/
	
	lcd_command_write(0x01);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
	set_timercounter2_output_mode(2);
	enable_timercounter2_interrupt(1);
	set_timercounter2_compare_value(255);
	sei();            //enable Global Interrupt*/
	
	sei();
 634:	78 94       	sei
		
	char cString2[5]={97,98,99,45,'\0'},cString3[5]={100,101,102,38,'\0'},cString4[5]={103,104,105,37,'\0'},
	cString5[5]={106,107,108,40,'\0'},cString6[5]={109,110,111,41,'\0'},cString7[5]={112,113,114,115,'\0'},
	cString8[5]={116,117,118,63,'\0'},cString9[5]={119,120,121,122,'\0'},cString1[5]={46,44,33,95,'\0'},cString0[5]={32,32,32,32,'\0'};
		
	unsigned char input_status=0; // 0-numeric and 1-alphabet
 636:	bb 24       	eor	r11, r11

	char password_set[5]="1111", password_entered[5];
	char input_array[34]="";
	char id_count[5]="";char CONT_ID[5] ="0001";
	
	unsigned char string_index=0;   const char s[2] = ",";
 638:	aa 24       	eor	r10, r10
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTB=0xff;
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char count=0, cursor_count=0, password_status=0, keypad_value;
 63a:	cc 24       	eor	r12, r12
					}
					else
					{
						//string_index=0;
						lcd_data_write(String6[string_index]);
						input_array[cursor_count]=cString6[string_index];
 63c:	0f 2e       	mov	r0, r31
 63e:	fb e0       	ldi	r31, 0x0B	; 11
 640:	8f 2e       	mov	r8, r31
 642:	99 24       	eor	r9, r9
 644:	f0 2d       	mov	r31, r0
 646:	8c 0e       	add	r8, r28
 648:	9d 1e       	adc	r9, r29

				case 10:
				{
				 lcd_command_write(0x10);
				 cursor_count--;
				 input_array[cursor_count]="";
 64a:	0f 2e       	mov	r0, r31
 64c:	f5 ed       	ldi	r31, 0xD5	; 213
 64e:	4f 2e       	mov	r4, r31
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	5f 2e       	mov	r5, r31
 654:	f0 2d       	mov	r31, r0
 656:	2e c0       	rjmp	.+92     	; 0x6b4 <__stack+0x255>
			password_status=1;
			/*Changing the Password Status to Correct Password*/
		}
		else
		{
			lcd_string_write("Wrong Password");
 658:	c6 01       	movw	r24, r12
 65a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
 65e:	4f ef       	ldi	r20, 0xFF	; 255
 660:	54 e3       	ldi	r21, 0x34	; 52
 662:	6c e0       	ldi	r22, 0x0C	; 12
 664:	41 50       	subi	r20, 0x01	; 1
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	60 40       	sbci	r22, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <__stack+0x205>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <__stack+0x20f>
 66e:	00 00       	nop
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	74 e3       	ldi	r23, 0x34	; 52
 674:	8c e0       	ldi	r24, 0x0C	; 12
 676:	61 50       	subi	r22, 0x01	; 1
 678:	70 40       	sbci	r23, 0x00	; 0
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <__stack+0x217>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <__stack+0x221>
 680:	00 00       	nop
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	94 e3       	ldi	r25, 0x34	; 52
 686:	ac e0       	ldi	r26, 0x0C	; 12
 688:	81 50       	subi	r24, 0x01	; 1
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	a0 40       	sbci	r26, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <__stack+0x229>
 690:	00 c0       	rjmp	.+0      	; 0x692 <__stack+0x233>
 692:	00 00       	nop
 694:	4f ef       	ldi	r20, 0xFF	; 255
 696:	54 e3       	ldi	r21, 0x34	; 52
 698:	6c e0       	ldi	r22, 0x0C	; 12
 69a:	41 50       	subi	r20, 0x01	; 1
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	60 40       	sbci	r22, 0x00	; 0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <__stack+0x23b>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <__stack+0x245>
 6a4:	00 00       	nop
			_delay_ms(500);
			_delay_ms(500);
			_delay_ms(500);
			/*Display stays for 2 second*/

			lcd_command_write(0x01);
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
			/*Clear screen*/

			lcd_string_write("Reenter Password");
 6ac:	c5 01       	movw	r24, r10
 6ae:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
 6b2:	69 cf       	rjmp	.-302    	; 0x586 <__stack+0x127>
	
	sei();
	/*Start of infinite loop*/
	while(1)
	{
		lcd_command_write(0x06);
 6b4:	86 e0       	ldi	r24, 0x06	; 6
 6b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
		
		keypad_value=read_keypad();
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <read_keypad>
 6be:	d8 2e       	mov	r13, r24
		/*Scans 4X4 keypad and returns pressed key value or default value*/
		
		if (usart_receive_status==1)
 6c0:	80 91 40 01 	lds	r24, 0x0140
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__stack+0x26b>
 6c8:	83 c0       	rjmp	.+262    	; 0x7d0 <__stack+0x371>
		{
			lcd_command_write(0x01);
 6ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
			lcd_command_write(0x80);
 6ce:	80 e8       	ldi	r24, 0x80	; 128
 6d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
			cursor_count=0;
			keypad_value=0xff;
			usart_receive_status=0;
 6d4:	10 92 40 01 	sts	0x0140, r1
			token = strtok(usart_received_data, s);
 6d8:	8a e1       	ldi	r24, 0x1A	; 26
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	be 01       	movw	r22, r28
 6de:	69 5c       	subi	r22, 0xC9	; 201
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	0e 94 34 06 	call	0xc68	; 0xc68 <strtok>
			token = strtok(NULL, s);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	be 01       	movw	r22, r28
 6ec:	69 5c       	subi	r22, 0xC9	; 201
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	0e 94 34 06 	call	0xc68	; 0xc68 <strtok>
 6f4:	8c 01       	movw	r16, r24
			if ((!(strcmp(token,CONT_ID))||!(strcmp(token,"0000"))))
 6f6:	be 01       	movw	r22, r28
 6f8:	6e 5c       	subi	r22, 0xCE	; 206
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	0e 94 39 06 	call	0xc72	; 0xc72 <strcmp>
 700:	28 2f       	mov	r18, r24
 702:	39 2f       	mov	r19, r25
 704:	21 15       	cp	r18, r1
 706:	31 05       	cpc	r19, r1
 708:	59 f0       	breq	.+22     	; 0x720 <__stack+0x2c1>
 70a:	c8 01       	movw	r24, r16
 70c:	62 ec       	ldi	r22, 0xC2	; 194
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	0e 94 39 06 	call	0xc72	; 0xc72 <strcmp>
 714:	28 2f       	mov	r18, r24
 716:	39 2f       	mov	r19, r25
 718:	21 15       	cp	r18, r1
 71a:	31 05       	cpc	r19, r1
 71c:	09 f0       	breq	.+2      	; 0x720 <__stack+0x2c1>
 71e:	52 c0       	rjmp	.+164    	; 0x7c4 <__stack+0x365>
			{
				lcd_command_write(0x01);
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				lcd_command_write(0x80);
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				for (int i=0;i<=((count2)-8);i++)
 72c:	80 91 3f 01 	lds	r24, 0x013F
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	08 97       	sbiw	r24, 0x08	; 8
 734:	0a f0       	brmi	.+2      	; 0x738 <__stack+0x2d9>
 736:	86 c2       	rjmp	.+1292   	; 0xc44 <__stack+0x7e5>
		
		if (usart_receive_status==1)
		{
			lcd_command_write(0x01);
			lcd_command_write(0x80);
			cursor_count=0;
 738:	cc 24       	eor	r12, r12
 73a:	16 c0       	rjmp	.+44     	; 0x768 <__stack+0x309>
			{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				for (int i=0;i<=((count2)-8);i++)
				{
					lcd_data_write(usart_received_data[i]);
 73c:	f7 01       	movw	r30, r14
 73e:	e0 0f       	add	r30, r16
 740:	f1 1f       	adc	r31, r17
 742:	80 81       	ld	r24, Z
 744:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
					cursor_count++;
 748:	c3 94       	inc	r12
					if (cursor_count==16)
 74a:	50 e1       	ldi	r21, 0x10	; 16
 74c:	c5 16       	cp	r12, r21
 74e:	19 f4       	brne	.+6      	; 0x756 <__stack+0x2f7>
					{
						lcd_command_write(0xc0);
 750:	80 ec       	ldi	r24, 0xC0	; 192
 752:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
			token = strtok(NULL, s);
			if ((!(strcmp(token,CONT_ID))||!(strcmp(token,"0000"))))
			{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				for (int i=0;i<=((count2)-8);i++)
 756:	0f 5f       	subi	r16, 0xFF	; 255
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	80 91 3f 01 	lds	r24, 0x013F
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	08 97       	sbiw	r24, 0x08	; 8
 762:	80 17       	cp	r24, r16
 764:	91 07       	cpc	r25, r17
 766:	54 f7       	brge	.-44     	; 0x73c <__stack+0x2dd>
		
		if (usart_receive_status==1)
		{
			lcd_command_write(0x01);
			lcd_command_write(0x80);
			cursor_count=0;
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	90 e0       	ldi	r25, 0x00	; 0
						lcd_command_write(0xc0);
					}
				}
				for (int a=0;a<3;a++)
				{
					PORTD=0b01000000;
 76c:	20 e4       	ldi	r18, 0x40	; 64
 76e:	22 bb       	out	0x12, r18	; 18
 770:	4f e7       	ldi	r20, 0x7F	; 127
 772:	58 e3       	ldi	r21, 0x38	; 56
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	41 50       	subi	r20, 0x01	; 1
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	60 40       	sbci	r22, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <__stack+0x317>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <__stack+0x321>
 780:	00 00       	nop
					_delay_ms(50);
					PORTD=0b00000000;
 782:	12 ba       	out	0x12, r1	; 18
 784:	4f e7       	ldi	r20, 0x7F	; 127
 786:	58 e3       	ldi	r21, 0x38	; 56
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	41 50       	subi	r20, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	60 40       	sbci	r22, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <__stack+0x32b>
 792:	00 c0       	rjmp	.+0      	; 0x794 <__stack+0x335>
 794:	00 00       	nop
					_delay_ms(50);
					PORTD=0b01000000;
 796:	22 bb       	out	0x12, r18	; 18
 798:	4f e7       	ldi	r20, 0x7F	; 127
 79a:	58 e3       	ldi	r21, 0x38	; 56
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	41 50       	subi	r20, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	60 40       	sbci	r22, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <__stack+0x33f>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <__stack+0x349>
 7a8:	00 00       	nop
					_delay_ms(50);
					PORTD=0b00000000;
 7aa:	12 ba       	out	0x12, r1	; 18
 7ac:	4f e7       	ldi	r20, 0x7F	; 127
 7ae:	59 ea       	ldi	r21, 0xA9	; 169
 7b0:	63 e0       	ldi	r22, 0x03	; 3
 7b2:	41 50       	subi	r20, 0x01	; 1
 7b4:	50 40       	sbci	r21, 0x00	; 0
 7b6:	60 40       	sbci	r22, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__stack+0x353>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <__stack+0x35d>
 7bc:	00 00       	nop
 7be:	01 97       	sbiw	r24, 0x01	; 1
					if (cursor_count==16)
					{
						lcd_command_write(0xc0);
					}
				}
				for (int a=0;a<3;a++)
 7c0:	b1 f6       	brne	.-84     	; 0x76e <__stack+0x30f>
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <__stack+0x367>
		
		if (usart_receive_status==1)
		{
			lcd_command_write(0x01);
			lcd_command_write(0x80);
			cursor_count=0;
 7c4:	cc 24       	eor	r12, r12
					PORTD=0b00000000;
					_delay_ms(150);
				}
			}
				
			count2=0;	
 7c6:	10 92 3f 01 	sts	0x013F, r1
		if (usart_receive_status==1)
		{
			lcd_command_write(0x01);
			lcd_command_write(0x80);
			cursor_count=0;
			keypad_value=0xff;
 7ca:	dd 24       	eor	r13, r13
 7cc:	da 94       	dec	r13
 7ce:	5e c0       	rjmp	.+188    	; 0x88c <__stack+0x42d>
				
			count2=0;	
			//lcd_command_write(0x14);
		}
		
		if (keypad_value == 15)
 7d0:	5f e0       	ldi	r21, 0x0F	; 15
 7d2:	d5 16       	cp	r13, r21
 7d4:	41 f4       	brne	.+16     	; 0x7e6 <__stack+0x387>
		{
			if (input_status==0)
 7d6:	bb 20       	and	r11, r11
 7d8:	09 f4       	brne	.+2      	; 0x7dc <__stack+0x37d>
 7da:	43 c2       	rjmp	.+1158   	; 0xc62 <__stack+0x803>
			{
				input_status=1;
			}
			else if (input_status==1)
 7dc:	61 e0       	ldi	r22, 0x01	; 1
 7de:	b6 16       	cp	r11, r22
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <__stack+0x385>
 7e2:	54 c0       	rjmp	.+168    	; 0x88c <__stack+0x42d>
 7e4:	57 c0       	rjmp	.+174    	; 0x894 <__stack+0x435>
			{
				input_status=0;
			}
		}
		if (keypad_value == 12)
 7e6:	7c e0       	ldi	r23, 0x0C	; 12
 7e8:	d7 16       	cp	r13, r23
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__stack+0x38f>
 7ec:	4f c0       	rjmp	.+158    	; 0x88c <__stack+0x42d>
		{
			lcd_command_write(0x01);
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
					/*Clear screen*/
					
					lcd_command_write(0x80);
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
					
					for(int i=0;i<(cursor_count-4);i++)
 7fa:	8c 2d       	mov	r24, r12
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	04 97       	sbiw	r24, 0x04	; 4
 800:	18 16       	cp	r1, r24
 802:	19 06       	cpc	r1, r25
 804:	7c f4       	brge	.+30     	; 0x824 <__stack+0x3c5>
 806:	74 01       	movw	r14, r8
	}
	count2++;
	
}

int main(void)
 808:	07 e0       	ldi	r16, 0x07	; 7
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	0c 0f       	add	r16, r28
 80e:	1d 1f       	adc	r17, r29
 810:	0c 0d       	add	r16, r12
 812:	11 1d       	adc	r17, r1
					
					lcd_command_write(0x80);
					
					for(int i=0;i<(cursor_count-4);i++)
					{
						usart_data_transmit(input_array[i]);
 814:	d7 01       	movw	r26, r14
 816:	8d 91       	ld	r24, X+
 818:	7d 01       	movw	r14, r26
 81a:	0e 94 b5 00 	call	0x16a	; 0x16a <usart_data_transmit>
			lcd_command_write(0x01);
					/*Clear screen*/
					
					lcd_command_write(0x80);
					
					for(int i=0;i<(cursor_count-4);i++)
 81e:	e0 16       	cp	r14, r16
 820:	f1 06       	cpc	r15, r17
 822:	c1 f7       	brne	.-16     	; 0x814 <__stack+0x3b5>
					{
						usart_data_transmit(input_array[i]);
					}
					usart_string_transmit(",");
 824:	87 ec       	ldi	r24, 0xC7	; 199
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 bd 00 	call	0x17a	; 0x17a <usart_string_transmit>
 82c:	8e 01       	movw	r16, r28
 82e:	03 5d       	subi	r16, 0xD3	; 211
 830:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	count2++;
	
}

int main(void)
 832:	0f 2e       	mov	r0, r31
 834:	f1 e3       	ldi	r31, 0x31	; 49
 836:	ef 2e       	mov	r14, r31
 838:	ff 24       	eor	r15, r15
 83a:	f0 2d       	mov	r31, r0
 83c:	ec 0e       	add	r14, r28
 83e:	fd 1e       	adc	r15, r29
						usart_data_transmit(input_array[i]);
					}
					usart_string_transmit(",");
					for(int i=0;i<=3;i++)
					{
						usart_data_transmit(id_count[i]);
 840:	f8 01       	movw	r30, r16
 842:	81 91       	ld	r24, Z+
 844:	8f 01       	movw	r16, r30
 846:	0e 94 b5 00 	call	0x16a	; 0x16a <usart_data_transmit>
					for(int i=0;i<(cursor_count-4);i++)
					{
						usart_data_transmit(input_array[i]);
					}
					usart_string_transmit(",");
					for(int i=0;i<=3;i++)
 84a:	0e 15       	cp	r16, r14
 84c:	1f 05       	cpc	r17, r15
 84e:	c1 f7       	brne	.-16     	; 0x840 <__stack+0x3e1>
					{
						usart_data_transmit(id_count[i]);
					}
					usart_string_transmit(",");
 850:	87 ec       	ldi	r24, 0xC7	; 199
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 bd 00 	call	0x17a	; 0x17a <usart_string_transmit>
					usart_string_transmit("~");
 858:	89 ec       	ldi	r24, 0xC9	; 201
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 bd 00 	call	0x17a	; 0x17a <usart_string_transmit>
					//usart_string_transmit("     ID: 0001");
					//usart_data_transmit(0x0d);
					usart_data_transmit(0x0a);
 860:	8a e0       	ldi	r24, 0x0A	; 10
 862:	0e 94 b5 00 	call	0x16a	; 0x16a <usart_data_transmit>
					lcd_string_write("Page sent");
 866:	8b ec       	ldi	r24, 0xCB	; 203
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
 86e:	4f ef       	ldi	r20, 0xFF	; 255
 870:	51 ee       	ldi	r21, 0xE1	; 225
 872:	64 e0       	ldi	r22, 0x04	; 4
 874:	41 50       	subi	r20, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	60 40       	sbci	r22, 0x00	; 0
 87a:	e1 f7       	brne	.-8      	; 0x874 <__stack+0x415>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x41f>
 87e:	00 00       	nop
					_delay_ms(200);
					lcd_command_write(0x01);
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
					lcd_command_write(0x80);
 886:	80 e8       	ldi	r24, 0x80	; 128
 888:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
						lcd_data_write(input_array[i]);		
					}*/
		}
		
		/*Checking if any key is pressed or not*/
		if(keypad_value!=0xff)
 88c:	5f ef       	ldi	r21, 0xFF	; 255
 88e:	d5 16       	cp	r13, r21
 890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x437>
 892:	ce c1       	rjmp	.+924    	; 0xc30 <__stack+0x7d1>
			{
				input_status=1;
			}
			else if (input_status==1)
			{
				input_status=0;
 894:	bb 24       	eor	r11, r11
		}
		
		/*Checking if any key is pressed or not*/
		if(keypad_value!=0xff)
		{
			if (keypad_value!=10 && keypad_value!=11 && keypad_value!=12 && keypad_value!=13 && keypad_value!=14 && keypad_value!=15)
 896:	8d 2d       	mov	r24, r13
 898:	8a 50       	subi	r24, 0x0A	; 10
 89a:	86 30       	cpi	r24, 0x06	; 6
 89c:	40 f0       	brcs	.+16     	; 0x8ae <__stack+0x44f>
			{
				if (input_status==0)
 89e:	bb 20       	and	r11, r11
 8a0:	31 f4       	brne	.+12     	; 0x8ae <__stack+0x44f>
				{
					input_array[cursor_count]=48+keypad_value;
 8a2:	f4 01       	movw	r30, r8
 8a4:	ec 0d       	add	r30, r12
 8a6:	f1 1d       	adc	r31, r1
 8a8:	86 5c       	subi	r24, 0xC6	; 198
 8aa:	80 83       	st	Z, r24
					cursor_count++;
 8ac:	c3 94       	inc	r12
					//input_array[cursor_count]=;
					
				//}	
			}
			
			if (cursor_count==17)
 8ae:	61 e1       	ldi	r22, 0x11	; 17
 8b0:	c6 16       	cp	r12, r22
 8b2:	19 f4       	brne	.+6      	; 0x8ba <__stack+0x45b>
			{
				lcd_command_write(0xc0);
 8b4:	80 ec       	ldi	r24, 0xC0	; 192
 8b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
			//if(keypad_value == 12||keypad_value == 15)
			//{
			//	keypad_value=" ";
			//}
			
			switch(keypad_value)
 8ba:	76 e0       	ldi	r23, 0x06	; 6
 8bc:	d7 16       	cp	r13, r23
 8be:	09 f4       	brne	.+2      	; 0x8c2 <__stack+0x463>
 8c0:	d8 c0       	rjmp	.+432    	; 0xa72 <__stack+0x613>
 8c2:	7d 15       	cp	r23, r13
 8c4:	a8 f0       	brcs	.+42     	; 0x8f0 <__stack+0x491>
 8c6:	82 e0       	ldi	r24, 0x02	; 2
 8c8:	d8 16       	cp	r13, r24
 8ca:	09 f4       	brne	.+2      	; 0x8ce <__stack+0x46f>
 8cc:	60 c0       	rjmp	.+192    	; 0x98e <__stack+0x52f>
 8ce:	8d 15       	cp	r24, r13
 8d0:	38 f0       	brcs	.+14     	; 0x8e0 <__stack+0x481>
 8d2:	dd 20       	and	r13, r13
 8d4:	41 f1       	breq	.+80     	; 0x926 <__stack+0x4c7>
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	d9 16       	cp	r13, r25
 8da:	09 f0       	breq	.+2      	; 0x8de <__stack+0x47f>
 8dc:	a9 c1       	rjmp	.+850    	; 0xc30 <__stack+0x7d1>
 8de:	39 c0       	rjmp	.+114    	; 0x952 <__stack+0x4f3>
 8e0:	a4 e0       	ldi	r26, 0x04	; 4
 8e2:	da 16       	cp	r13, r26
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <__stack+0x489>
 8e6:	89 c0       	rjmp	.+274    	; 0x9fa <__stack+0x59b>
 8e8:	ad 15       	cp	r26, r13
 8ea:	08 f4       	brcc	.+2      	; 0x8ee <__stack+0x48f>
 8ec:	a4 c0       	rjmp	.+328    	; 0xa36 <__stack+0x5d7>
 8ee:	6a c0       	rjmp	.+212    	; 0x9c4 <__stack+0x565>
 8f0:	ba e0       	ldi	r27, 0x0A	; 10
 8f2:	db 16       	cp	r13, r27
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <__stack+0x499>
 8f6:	41 c1       	rjmp	.+642    	; 0xb7a <__stack+0x71b>
 8f8:	bd 15       	cp	r27, r13
 8fa:	40 f0       	brcs	.+16     	; 0x90c <__stack+0x4ad>
 8fc:	e8 e0       	ldi	r30, 0x08	; 8
 8fe:	de 16       	cp	r13, r30
 900:	09 f4       	brne	.+2      	; 0x904 <__stack+0x4a5>
 902:	f7 c0       	rjmp	.+494    	; 0xaf2 <__stack+0x693>
 904:	ed 15       	cp	r30, r13
 906:	08 f4       	brcc	.+2      	; 0x90a <__stack+0x4ab>
 908:	16 c1       	rjmp	.+556    	; 0xb36 <__stack+0x6d7>
 90a:	d1 c0       	rjmp	.+418    	; 0xaae <__stack+0x64f>
 90c:	fd e0       	ldi	r31, 0x0D	; 13
 90e:	df 16       	cp	r13, r31
 910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x4b5>
 912:	49 c1       	rjmp	.+658    	; 0xba6 <__stack+0x747>
 914:	4e e0       	ldi	r20, 0x0E	; 14
 916:	d4 16       	cp	r13, r20
 918:	09 f4       	brne	.+2      	; 0x91c <__stack+0x4bd>
 91a:	79 c1       	rjmp	.+754    	; 0xc0e <__stack+0x7af>
 91c:	5b e0       	ldi	r21, 0x0B	; 11
 91e:	d5 16       	cp	r13, r21
 920:	09 f0       	breq	.+2      	; 0x924 <__stack+0x4c5>
 922:	86 c1       	rjmp	.+780    	; 0xc30 <__stack+0x7d1>
 924:	3a c1       	rjmp	.+628    	; 0xb9a <__stack+0x73b>
			{
				case 0:
				{
					if (input_status==0)
 926:	bb 20       	and	r11, r11
 928:	21 f4       	brne	.+8      	; 0x932 <__stack+0x4d3>
					{
						lcd_data_write('0');
 92a:	80 e3       	ldi	r24, 0x30	; 48
 92c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 930:	7f c1       	rjmp	.+766    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else
					{
						lcd_command_write(0x14);
 932:	84 e1       	ldi	r24, 0x14	; 20
 934:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
						input_array[cursor_count]=cString0[string_index];
 938:	d4 01       	movw	r26, r8
 93a:	ac 0d       	add	r26, r12
 93c:	b1 1d       	adc	r27, r1
 93e:	e3 e9       	ldi	r30, 0x93	; 147
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	ec 0f       	add	r30, r28
 944:	fd 1f       	adc	r31, r29
 946:	ea 0d       	add	r30, r10
 948:	f1 1d       	adc	r31, r1
 94a:	80 81       	ld	r24, Z
 94c:	8c 93       	st	X, r24
						cursor_count++;
 94e:	c3 94       	inc	r12
 950:	6f c1       	rjmp	.+734    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 1:
				{
					if (input_status==0)
 952:	bb 20       	and	r11, r11
 954:	21 f4       	brne	.+8      	; 0x95e <__stack+0x4ff>
					{
						lcd_data_write('1');
 956:	81 e3       	ldi	r24, 0x31	; 49
 958:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 95c:	69 c1       	rjmp	.+722    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					} 
					else 
					{
						//string_index=0;
						lcd_data_write(String1[string_index]);
 95e:	0a 2d       	mov	r16, r10
 960:	10 e0       	ldi	r17, 0x00	; 0
 962:	e1 e6       	ldi	r30, 0x61	; 97
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	ec 0f       	add	r30, r28
 968:	fd 1f       	adc	r31, r29
 96a:	e0 0f       	add	r30, r16
 96c:	f1 1f       	adc	r31, r17
 96e:	80 81       	ld	r24, Z
 970:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString1[string_index];
 974:	d4 01       	movw	r26, r8
 976:	ac 0d       	add	r26, r12
 978:	b1 1d       	adc	r27, r1
 97a:	ee e8       	ldi	r30, 0x8E	; 142
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	ec 0f       	add	r30, r28
 980:	fd 1f       	adc	r31, r29
 982:	e0 0f       	add	r30, r16
 984:	f1 1f       	adc	r31, r17
 986:	80 81       	ld	r24, Z
 988:	8c 93       	st	X, r24
						cursor_count++;		
 98a:	c3 94       	inc	r12
 98c:	51 c1       	rjmp	.+674    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 2:
				{
					if (input_status==0)
 98e:	bb 20       	and	r11, r11
 990:	21 f4       	brne	.+8      	; 0x99a <__stack+0x53b>
					{
						lcd_data_write('2');
 992:	82 e3       	ldi	r24, 0x32	; 50
 994:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 998:	4b c1       	rjmp	.+662    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else 
					{
						//string_index=0;
						lcd_data_write(String2[string_index]);
 99a:	0a 2d       	mov	r16, r10
 99c:	10 e0       	ldi	r17, 0x00	; 0
 99e:	fe 01       	movw	r30, r28
 9a0:	e0 0f       	add	r30, r16
 9a2:	f1 1f       	adc	r31, r17
 9a4:	81 ad       	sts	0x61, r24
 9a6:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString2[string_index];
 9aa:	d4 01       	movw	r26, r8
 9ac:	ac 0d       	add	r26, r12
 9ae:	b1 1d       	adc	r27, r1
 9b0:	e6 e6       	ldi	r30, 0x66	; 102
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	ec 0f       	add	r30, r28
 9b6:	fd 1f       	adc	r31, r29
 9b8:	e0 0f       	add	r30, r16
 9ba:	f1 1f       	adc	r31, r17
 9bc:	80 81       	ld	r24, Z
 9be:	8c 93       	st	X, r24
						cursor_count++;
 9c0:	c3 94       	inc	r12
 9c2:	36 c1       	rjmp	.+620    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/
				
				case 3:
				{
					if (input_status==0)
 9c4:	bb 20       	and	r11, r11
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <__stack+0x571>
					{
						lcd_data_write('3');
 9c8:	83 e3       	ldi	r24, 0x33	; 51
 9ca:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 9ce:	30 c1       	rjmp	.+608    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else 
					{
						//string_index=0;
						lcd_data_write(String3[string_index]);
 9d0:	0a 2d       	mov	r16, r10
 9d2:	10 e0       	ldi	r17, 0x00	; 0
 9d4:	fe 01       	movw	r30, r28
 9d6:	e0 0f       	add	r30, r16
 9d8:	f1 1f       	adc	r31, r17
 9da:	86 ad       	sts	0x66, r24
 9dc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString3[string_index];
 9e0:	d4 01       	movw	r26, r8
 9e2:	ac 0d       	add	r26, r12
 9e4:	b1 1d       	adc	r27, r1
 9e6:	eb e6       	ldi	r30, 0x6B	; 107
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	ec 0f       	add	r30, r28
 9ec:	fd 1f       	adc	r31, r29
 9ee:	e0 0f       	add	r30, r16
 9f0:	f1 1f       	adc	r31, r17
 9f2:	80 81       	ld	r24, Z
 9f4:	8c 93       	st	X, r24
						cursor_count++;
 9f6:	c3 94       	inc	r12
 9f8:	1b c1       	rjmp	.+566    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 4:
				{
					if (input_status==0)
 9fa:	bb 20       	and	r11, r11
 9fc:	21 f4       	brne	.+8      	; 0xa06 <__stack+0x5a7>
					{
						lcd_data_write('4');
 9fe:	84 e3       	ldi	r24, 0x34	; 52
 a00:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 a04:	15 c1       	rjmp	.+554    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else 
					{
						//string_index=0;
						lcd_data_write(String4[string_index]);
 a06:	0a 2d       	mov	r16, r10
 a08:	10 e0       	ldi	r17, 0x00	; 0
 a0a:	e3 e4       	ldi	r30, 0x43	; 67
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	ec 0f       	add	r30, r28
 a10:	fd 1f       	adc	r31, r29
 a12:	e0 0f       	add	r30, r16
 a14:	f1 1f       	adc	r31, r17
 a16:	80 81       	ld	r24, Z
 a18:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString4[string_index];
 a1c:	d4 01       	movw	r26, r8
 a1e:	ac 0d       	add	r26, r12
 a20:	b1 1d       	adc	r27, r1
 a22:	e0 e7       	ldi	r30, 0x70	; 112
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	ec 0f       	add	r30, r28
 a28:	fd 1f       	adc	r31, r29
 a2a:	e0 0f       	add	r30, r16
 a2c:	f1 1f       	adc	r31, r17
 a2e:	80 81       	ld	r24, Z
 a30:	8c 93       	st	X, r24
						cursor_count++;
 a32:	c3 94       	inc	r12
 a34:	fd c0       	rjmp	.+506    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 5:
				{
					if (input_status==0)
 a36:	bb 20       	and	r11, r11
 a38:	21 f4       	brne	.+8      	; 0xa42 <__stack+0x5e3>
					{
						lcd_data_write('5');
 a3a:	85 e3       	ldi	r24, 0x35	; 53
 a3c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 a40:	f7 c0       	rjmp	.+494    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else 
					{
						//string_index=0;
						lcd_data_write(String5[string_index]);
 a42:	0a 2d       	mov	r16, r10
 a44:	10 e0       	ldi	r17, 0x00	; 0
 a46:	e8 e4       	ldi	r30, 0x48	; 72
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	ec 0f       	add	r30, r28
 a4c:	fd 1f       	adc	r31, r29
 a4e:	e0 0f       	add	r30, r16
 a50:	f1 1f       	adc	r31, r17
 a52:	80 81       	ld	r24, Z
 a54:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString5[string_index];
 a58:	d4 01       	movw	r26, r8
 a5a:	ac 0d       	add	r26, r12
 a5c:	b1 1d       	adc	r27, r1
 a5e:	e5 e7       	ldi	r30, 0x75	; 117
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	ec 0f       	add	r30, r28
 a64:	fd 1f       	adc	r31, r29
 a66:	e0 0f       	add	r30, r16
 a68:	f1 1f       	adc	r31, r17
 a6a:	80 81       	ld	r24, Z
 a6c:	8c 93       	st	X, r24
						cursor_count++;
 a6e:	c3 94       	inc	r12
 a70:	df c0       	rjmp	.+446    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 6:
				{
					if (input_status==0)
 a72:	bb 20       	and	r11, r11
 a74:	21 f4       	brne	.+8      	; 0xa7e <__stack+0x61f>
					{
						lcd_data_write('6');
 a76:	86 e3       	ldi	r24, 0x36	; 54
 a78:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 a7c:	d9 c0       	rjmp	.+434    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else
					{
						//string_index=0;
						lcd_data_write(String6[string_index]);
 a7e:	0a 2d       	mov	r16, r10
 a80:	10 e0       	ldi	r17, 0x00	; 0
 a82:	ed e4       	ldi	r30, 0x4D	; 77
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	ec 0f       	add	r30, r28
 a88:	fd 1f       	adc	r31, r29
 a8a:	e0 0f       	add	r30, r16
 a8c:	f1 1f       	adc	r31, r17
 a8e:	80 81       	ld	r24, Z
 a90:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString6[string_index];
 a94:	d4 01       	movw	r26, r8
 a96:	ac 0d       	add	r26, r12
 a98:	b1 1d       	adc	r27, r1
 a9a:	ea e7       	ldi	r30, 0x7A	; 122
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	ec 0f       	add	r30, r28
 aa0:	fd 1f       	adc	r31, r29
 aa2:	e0 0f       	add	r30, r16
 aa4:	f1 1f       	adc	r31, r17
 aa6:	80 81       	ld	r24, Z
 aa8:	8c 93       	st	X, r24
						cursor_count++;
 aaa:	c3 94       	inc	r12
 aac:	c1 c0       	rjmp	.+386    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 7:
				{
					if (input_status==0)
 aae:	bb 20       	and	r11, r11
 ab0:	21 f4       	brne	.+8      	; 0xaba <__stack+0x65b>
					{
						lcd_data_write('7');
 ab2:	87 e3       	ldi	r24, 0x37	; 55
 ab4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 ab8:	bb c0       	rjmp	.+374    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else if(input_status==1)
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	b6 16       	cp	r11, r22
 abe:	09 f0       	breq	.+2      	; 0xac2 <__stack+0x663>
 ac0:	b7 c0       	rjmp	.+366    	; 0xc30 <__stack+0x7d1>
					{
						//string_index=0;
						lcd_data_write(String7[string_index]);
 ac2:	0a 2d       	mov	r16, r10
 ac4:	10 e0       	ldi	r17, 0x00	; 0
 ac6:	e2 e5       	ldi	r30, 0x52	; 82
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ec 0f       	add	r30, r28
 acc:	fd 1f       	adc	r31, r29
 ace:	e0 0f       	add	r30, r16
 ad0:	f1 1f       	adc	r31, r17
 ad2:	80 81       	ld	r24, Z
 ad4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString7[string_index];
 ad8:	d4 01       	movw	r26, r8
 ada:	ac 0d       	add	r26, r12
 adc:	b1 1d       	adc	r27, r1
 ade:	ef e7       	ldi	r30, 0x7F	; 127
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	ec 0f       	add	r30, r28
 ae4:	fd 1f       	adc	r31, r29
 ae6:	e0 0f       	add	r30, r16
 ae8:	f1 1f       	adc	r31, r17
 aea:	80 81       	ld	r24, Z
 aec:	8c 93       	st	X, r24
						cursor_count++;
 aee:	c3 94       	inc	r12
 af0:	9f c0       	rjmp	.+318    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 8:
				{
					if (input_status==0)
 af2:	bb 20       	and	r11, r11
 af4:	21 f4       	brne	.+8      	; 0xafe <__stack+0x69f>
					{
						lcd_data_write('8');
 af6:	88 e3       	ldi	r24, 0x38	; 56
 af8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 afc:	99 c0       	rjmp	.+306    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else if(input_status==1)
 afe:	71 e0       	ldi	r23, 0x01	; 1
 b00:	b7 16       	cp	r11, r23
 b02:	09 f0       	breq	.+2      	; 0xb06 <__stack+0x6a7>
 b04:	95 c0       	rjmp	.+298    	; 0xc30 <__stack+0x7d1>
					{
						//string_index=0;
						lcd_data_write(String8[string_index]);
 b06:	0a 2d       	mov	r16, r10
 b08:	10 e0       	ldi	r17, 0x00	; 0
 b0a:	e7 e5       	ldi	r30, 0x57	; 87
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	ec 0f       	add	r30, r28
 b10:	fd 1f       	adc	r31, r29
 b12:	e0 0f       	add	r30, r16
 b14:	f1 1f       	adc	r31, r17
 b16:	80 81       	ld	r24, Z
 b18:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString8[string_index];
 b1c:	d4 01       	movw	r26, r8
 b1e:	ac 0d       	add	r26, r12
 b20:	b1 1d       	adc	r27, r1
 b22:	e4 e8       	ldi	r30, 0x84	; 132
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	ec 0f       	add	r30, r28
 b28:	fd 1f       	adc	r31, r29
 b2a:	e0 0f       	add	r30, r16
 b2c:	f1 1f       	adc	r31, r17
 b2e:	80 81       	ld	r24, Z
 b30:	8c 93       	st	X, r24
						cursor_count++;
 b32:	c3 94       	inc	r12
 b34:	7d c0       	rjmp	.+250    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 9:
				{
					if (input_status==0)
 b36:	bb 20       	and	r11, r11
 b38:	21 f4       	brne	.+8      	; 0xb42 <__stack+0x6e3>
					{
						lcd_data_write('9');
 b3a:	89 e3       	ldi	r24, 0x39	; 57
 b3c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
 b40:	77 c0       	rjmp	.+238    	; 0xc30 <__stack+0x7d1>
						/*Displays 1 in 2nd row of LCD*/
					}
					else if(input_status==1)
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	b8 16       	cp	r11, r24
 b46:	09 f0       	breq	.+2      	; 0xb4a <__stack+0x6eb>
 b48:	73 c0       	rjmp	.+230    	; 0xc30 <__stack+0x7d1>
					{
						//string_index=0;
						lcd_data_write(String9[string_index]);
 b4a:	0a 2d       	mov	r16, r10
 b4c:	10 e0       	ldi	r17, 0x00	; 0
 b4e:	ec e5       	ldi	r30, 0x5C	; 92
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	ec 0f       	add	r30, r28
 b54:	fd 1f       	adc	r31, r29
 b56:	e0 0f       	add	r30, r16
 b58:	f1 1f       	adc	r31, r17
 b5a:	80 81       	ld	r24, Z
 b5c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
						input_array[cursor_count]=cString9[string_index];
 b60:	d4 01       	movw	r26, r8
 b62:	ac 0d       	add	r26, r12
 b64:	b1 1d       	adc	r27, r1
 b66:	e9 e8       	ldi	r30, 0x89	; 137
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	ec 0f       	add	r30, r28
 b6c:	fd 1f       	adc	r31, r29
 b6e:	e0 0f       	add	r30, r16
 b70:	f1 1f       	adc	r31, r17
 b72:	80 81       	ld	r24, Z
 b74:	8c 93       	st	X, r24
						cursor_count++;
 b76:	c3 94       	inc	r12
 b78:	5b c0       	rjmp	.+182    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 10:
				{
				 lcd_command_write(0x10);
 b7a:	80 e1       	ldi	r24, 0x10	; 16
 b7c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				 cursor_count--;
 b80:	ca 94       	dec	r12
				 input_array[cursor_count]="";
 b82:	f4 01       	movw	r30, r8
 b84:	ec 0d       	add	r30, r12
 b86:	f1 1d       	adc	r31, r1
 b88:	40 82       	st	Z, r4
				 lcd_string_write(" ");
 b8a:	86 ed       	ldi	r24, 0xD6	; 214
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
				 lcd_command_write(0x10);
 b92:	80 e1       	ldi	r24, 0x10	; 16
 b94:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				};

				break;
 b98:	4b c0       	rjmp	.+150    	; 0xc30 <__stack+0x7d1>
				/*Break statement*/

				case 11:
				{
				string_index++;
 b9a:	a3 94       	inc	r10
				if (string_index>=4)
 b9c:	93 e0       	ldi	r25, 0x03	; 3
 b9e:	9a 15       	cp	r25, r10
 ba0:	08 f4       	brcc	.+2      	; 0xba4 <__stack+0x745>
 ba2:	45 c0       	rjmp	.+138    	; 0xc2e <__stack+0x7cf>
 ba4:	45 c0       	rjmp	.+138    	; 0xc30 <__stack+0x7d1>
				break;
				/*Break statement*/

				case 13:
				{
				lcd_command_write(0x01);
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				lcd_command_write(0x80);
 bac:	80 e8       	ldi	r24, 0x80	; 128
 bae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				lcd_string_write("ID: ");
 bb2:	88 ed       	ldi	r24, 0xD8	; 216
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_string_write>
				for (int i=((cursor_count)-4),j=0;i<cursor_count && j<=3;i++,j++)
 bba:	6c 2c       	mov	r6, r12
 bbc:	77 24       	eor	r7, r7
 bbe:	c3 01       	movw	r24, r6
 bc0:	04 97       	sbiw	r24, 0x04	; 4
 bc2:	86 15       	cp	r24, r6
 bc4:	97 05       	cpc	r25, r7
 bc6:	a4 f5       	brge	.+104    	; 0xc30 <__stack+0x7d1>
	}
	count2++;
	
}

int main(void)
 bc8:	84 01       	movw	r16, r8
 bca:	08 0f       	add	r16, r24
 bcc:	19 1f       	adc	r17, r25
				case 13:
				{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				lcd_string_write("ID: ");
				for (int i=((cursor_count)-4),j=0;i<cursor_count && j<=3;i++,j++)
 bce:	0f 2e       	mov	r0, r31
 bd0:	fd e2       	ldi	r31, 0x2D	; 45
 bd2:	ef 2e       	mov	r14, r31
 bd4:	ff 24       	eor	r15, r15
 bd6:	f0 2d       	mov	r31, r0
 bd8:	ec 0e       	add	r14, r28
 bda:	fd 1e       	adc	r15, r29
	}
	count2++;
	
}

int main(void)
 bdc:	0f 2e       	mov	r0, r31
 bde:	f1 e3       	ldi	r31, 0x31	; 49
 be0:	2f 2e       	mov	r2, r31
 be2:	33 24       	eor	r3, r3
 be4:	f0 2d       	mov	r31, r0
 be6:	2c 0e       	add	r2, r28
 be8:	3d 1e       	adc	r3, r29
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				lcd_string_write("ID: ");
				for (int i=((cursor_count)-4),j=0;i<cursor_count && j<=3;i++,j++)
				{
					id_count[j]=input_array[i];
 bea:	d8 01       	movw	r26, r16
 bec:	8d 91       	ld	r24, X+
 bee:	8d 01       	movw	r16, r26
 bf0:	f7 01       	movw	r30, r14
 bf2:	81 93       	st	Z+, r24
 bf4:	7f 01       	movw	r14, r30
					lcd_data_write(id_count[j]);
 bf6:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
	}
	count2++;
	
}

int main(void)
 bfa:	c8 01       	movw	r24, r16
 bfc:	88 19       	sub	r24, r8
 bfe:	99 09       	sbc	r25, r9
				case 13:
				{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				lcd_string_write("ID: ");
				for (int i=((cursor_count)-4),j=0;i<cursor_count && j<=3;i++,j++)
 c00:	86 15       	cp	r24, r6
 c02:	97 05       	cpc	r25, r7
 c04:	ac f4       	brge	.+42     	; 0xc30 <__stack+0x7d1>
 c06:	e2 14       	cp	r14, r2
 c08:	f3 04       	cpc	r15, r3
 c0a:	79 f7       	brne	.-34     	; 0xbea <__stack+0x78b>
 c0c:	11 c0       	rjmp	.+34     	; 0xc30 <__stack+0x7d1>

				case 14:
				{
				//lcd_data_write('C');
				
				lcd_command_write(0x01);
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command_write>
				for (int i=0;i<=cursor_count;i++)
 c14:	8c 2d       	mov	r24, r12
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	f4 01       	movw	r30, r8
 c1a:	20 e0       	ldi	r18, 0x00	; 0
 c1c:	30 e0       	ldi	r19, 0x00	; 0
				{
					input_array[i]="";
 c1e:	41 92       	st	Z+, r4
				case 14:
				{
				//lcd_data_write('C');
				
				lcd_command_write(0x01);
				for (int i=0;i<=cursor_count;i++)
 c20:	2f 5f       	subi	r18, 0xFF	; 255
 c22:	3f 4f       	sbci	r19, 0xFF	; 255
 c24:	82 17       	cp	r24, r18
 c26:	93 07       	cpc	r25, r19
 c28:	d4 f7       	brge	.-12     	; 0xc1e <__stack+0x7bf>
				{
					input_array[i]="";
				}
				cursor_count=0;
 c2a:	cc 24       	eor	r12, r12
 c2c:	01 c0       	rjmp	.+2      	; 0xc30 <__stack+0x7d1>
				case 11:
				{
				string_index++;
				if (string_index>=4)
				{
					string_index=0;
 c2e:	aa 24       	eor	r10, r10
 c30:	4f ef       	ldi	r20, 0xFF	; 255
 c32:	51 ee       	ldi	r21, 0xE1	; 225
 c34:	64 e0       	ldi	r22, 0x04	; 4
 c36:	41 50       	subi	r20, 0x01	; 1
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	60 40       	sbci	r22, 0x00	; 0
 c3c:	e1 f7       	brne	.-8      	; 0xc36 <__stack+0x7d7>
 c3e:	00 c0       	rjmp	.+0      	; 0xc40 <__stack+0x7e1>
 c40:	00 00       	nop
 c42:	38 cd       	rjmp	.-1424   	; 0x6b4 <__stack+0x255>
			{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				for (int i=0;i<=((count2)-8);i++)
				{
					lcd_data_write(usart_received_data[i]);
 c44:	80 91 1a 01 	lds	r24, 0x011A
 c48:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_data_write>
			token = strtok(NULL, s);
			if ((!(strcmp(token,CONT_ID))||!(strcmp(token,"0000"))))
			{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				for (int i=0;i<=((count2)-8);i++)
 c4c:	00 e0       	ldi	r16, 0x00	; 0
 c4e:	10 e0       	ldi	r17, 0x00	; 0
				{
					lcd_data_write(usart_received_data[i]);
					cursor_count++;
 c50:	cc 24       	eor	r12, r12
 c52:	c3 94       	inc	r12
			{
				lcd_command_write(0x01);
				lcd_command_write(0x80);
				for (int i=0;i<=((count2)-8);i++)
				{
					lcd_data_write(usart_received_data[i]);
 c54:	0f 2e       	mov	r0, r31
 c56:	fa e1       	ldi	r31, 0x1A	; 26
 c58:	ef 2e       	mov	r14, r31
 c5a:	f1 e0       	ldi	r31, 0x01	; 1
 c5c:	ff 2e       	mov	r15, r31
 c5e:	f0 2d       	mov	r31, r0
 c60:	7a cd       	rjmp	.-1292   	; 0x756 <__stack+0x2f7>
		
		if (keypad_value == 15)
		{
			if (input_status==0)
			{
				input_status=1;
 c62:	bb 24       	eor	r11, r11
 c64:	b3 94       	inc	r11
 c66:	12 ce       	rjmp	.-988    	; 0x88c <__stack+0x42d>

00000c68 <strtok>:
 c68:	4d e3       	ldi	r20, 0x3D	; 61
 c6a:	51 e0       	ldi	r21, 0x01	; 1
 c6c:	0e 94 42 06 	call	0xc84	; 0xc84 <strtok_r>
 c70:	08 95       	ret

00000c72 <strcmp>:
 c72:	fb 01       	movw	r30, r22
 c74:	dc 01       	movw	r26, r24
 c76:	8d 91       	ld	r24, X+
 c78:	01 90       	ld	r0, Z+
 c7a:	80 19       	sub	r24, r0
 c7c:	01 10       	cpse	r0, r1
 c7e:	d9 f3       	breq	.-10     	; 0xc76 <strcmp+0x4>
 c80:	99 0b       	sbc	r25, r25
 c82:	08 95       	ret

00000c84 <strtok_r>:
 c84:	fa 01       	movw	r30, r20
 c86:	a1 91       	ld	r26, Z+
 c88:	b0 81       	ld	r27, Z
 c8a:	00 97       	sbiw	r24, 0x00	; 0
 c8c:	19 f4       	brne	.+6      	; 0xc94 <strtok_r+0x10>
 c8e:	10 97       	sbiw	r26, 0x00	; 0
 c90:	e1 f0       	breq	.+56     	; 0xcca <strtok_r+0x46>
 c92:	cd 01       	movw	r24, r26
 c94:	dc 01       	movw	r26, r24
 c96:	cd 01       	movw	r24, r26
 c98:	0d 90       	ld	r0, X+
 c9a:	00 20       	and	r0, r0
 c9c:	11 f4       	brne	.+4      	; 0xca2 <strtok_r+0x1e>
 c9e:	c0 01       	movw	r24, r0
 ca0:	13 c0       	rjmp	.+38     	; 0xcc8 <strtok_r+0x44>
 ca2:	fb 01       	movw	r30, r22
 ca4:	21 91       	ld	r18, Z+
 ca6:	22 23       	and	r18, r18
 ca8:	19 f0       	breq	.+6      	; 0xcb0 <strtok_r+0x2c>
 caa:	20 15       	cp	r18, r0
 cac:	d9 f7       	brne	.-10     	; 0xca4 <strtok_r+0x20>
 cae:	f3 cf       	rjmp	.-26     	; 0xc96 <strtok_r+0x12>
 cb0:	fb 01       	movw	r30, r22
 cb2:	21 91       	ld	r18, Z+
 cb4:	20 15       	cp	r18, r0
 cb6:	19 f4       	brne	.+6      	; 0xcbe <strtok_r+0x3a>
 cb8:	1e 92       	st	-X, r1
 cba:	11 96       	adiw	r26, 0x01	; 1
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <strtok_r+0x46>
 cbe:	22 23       	and	r18, r18
 cc0:	c1 f7       	brne	.-16     	; 0xcb2 <strtok_r+0x2e>
 cc2:	0d 90       	ld	r0, X+
 cc4:	00 20       	and	r0, r0
 cc6:	a1 f7       	brne	.-24     	; 0xcb0 <strtok_r+0x2c>
 cc8:	d0 01       	movw	r26, r0
 cca:	fa 01       	movw	r30, r20
 ccc:	a1 93       	st	Z+, r26
 cce:	b0 83       	st	Z, r27
 cd0:	08 95       	ret

00000cd2 <itoa>:
 cd2:	fb 01       	movw	r30, r22
 cd4:	9f 01       	movw	r18, r30
 cd6:	e8 94       	clt
 cd8:	42 30       	cpi	r20, 0x02	; 2
 cda:	c4 f0       	brlt	.+48     	; 0xd0c <itoa+0x3a>
 cdc:	45 32       	cpi	r20, 0x25	; 37
 cde:	b4 f4       	brge	.+44     	; 0xd0c <itoa+0x3a>
 ce0:	4a 30       	cpi	r20, 0x0A	; 10
 ce2:	29 f4       	brne	.+10     	; 0xcee <itoa+0x1c>
 ce4:	97 fb       	bst	r25, 7
 ce6:	1e f4       	brtc	.+6      	; 0xcee <itoa+0x1c>
 ce8:	90 95       	com	r25
 cea:	81 95       	neg	r24
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	64 2f       	mov	r22, r20
 cf0:	77 27       	eor	r23, r23
 cf2:	0e 94 9a 06 	call	0xd34	; 0xd34 <__udivmodhi4>
 cf6:	80 5d       	subi	r24, 0xD0	; 208
 cf8:	8a 33       	cpi	r24, 0x3A	; 58
 cfa:	0c f0       	brlt	.+2      	; 0xcfe <itoa+0x2c>
 cfc:	89 5d       	subi	r24, 0xD9	; 217
 cfe:	81 93       	st	Z+, r24
 d00:	cb 01       	movw	r24, r22
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	a1 f7       	brne	.-24     	; 0xcee <itoa+0x1c>
 d06:	16 f4       	brtc	.+4      	; 0xd0c <itoa+0x3a>
 d08:	5d e2       	ldi	r21, 0x2D	; 45
 d0a:	51 93       	st	Z+, r21
 d0c:	10 82       	st	Z, r1
 d0e:	c9 01       	movw	r24, r18
 d10:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <strrev>

00000d14 <strrev>:
 d14:	dc 01       	movw	r26, r24
 d16:	fc 01       	movw	r30, r24
 d18:	67 2f       	mov	r22, r23
 d1a:	71 91       	ld	r23, Z+
 d1c:	77 23       	and	r23, r23
 d1e:	e1 f7       	brne	.-8      	; 0xd18 <strrev+0x4>
 d20:	32 97       	sbiw	r30, 0x02	; 2
 d22:	04 c0       	rjmp	.+8      	; 0xd2c <strrev+0x18>
 d24:	7c 91       	ld	r23, X
 d26:	6d 93       	st	X+, r22
 d28:	70 83       	st	Z, r23
 d2a:	62 91       	ld	r22, -Z
 d2c:	ae 17       	cp	r26, r30
 d2e:	bf 07       	cpc	r27, r31
 d30:	c8 f3       	brcs	.-14     	; 0xd24 <strrev+0x10>
 d32:	08 95       	ret

00000d34 <__udivmodhi4>:
 d34:	aa 1b       	sub	r26, r26
 d36:	bb 1b       	sub	r27, r27
 d38:	51 e1       	ldi	r21, 0x11	; 17
 d3a:	07 c0       	rjmp	.+14     	; 0xd4a <__udivmodhi4_ep>

00000d3c <__udivmodhi4_loop>:
 d3c:	aa 1f       	adc	r26, r26
 d3e:	bb 1f       	adc	r27, r27
 d40:	a6 17       	cp	r26, r22
 d42:	b7 07       	cpc	r27, r23
 d44:	10 f0       	brcs	.+4      	; 0xd4a <__udivmodhi4_ep>
 d46:	a6 1b       	sub	r26, r22
 d48:	b7 0b       	sbc	r27, r23

00000d4a <__udivmodhi4_ep>:
 d4a:	88 1f       	adc	r24, r24
 d4c:	99 1f       	adc	r25, r25
 d4e:	5a 95       	dec	r21
 d50:	a9 f7       	brne	.-22     	; 0xd3c <__udivmodhi4_loop>
 d52:	80 95       	com	r24
 d54:	90 95       	com	r25
 d56:	bc 01       	movw	r22, r24
 d58:	cd 01       	movw	r24, r26
 d5a:	08 95       	ret

00000d5c <_exit>:
 d5c:	f8 94       	cli

00000d5e <__stop_program>:
 d5e:	ff cf       	rjmp	.-2      	; 0xd5e <__stop_program>
